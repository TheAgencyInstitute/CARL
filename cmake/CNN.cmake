# CNN Training Module CMake Configuration\n# Builds CNN training components with Nova GPU acceleration\n\n# Find required dependencies\nfind_package(Vulkan REQUIRED)\nfind_package(Threads REQUIRED)\n\n# Google Test for unit testing\nfind_package(GTest QUIET)\nif(NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n        googletest\n        GIT_REPOSITORY https://github.com/google/googletest.git\n        GIT_TAG release-1.12.1\n    )\n    FetchContent_MakeAvailable(googletest)\nendif()\n\n# CNN source files\nset(CNN_SOURCES\n    ${CMAKE_CURRENT_SOURCE_DIR}/src/ai_components/cnn_model.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/src/ai_components/carl_compute_engine.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/src/ai_components/compute_pipeline_manager.cpp\n)\n\n# CNN header files\nset(CNN_HEADERS\n    ${CMAKE_CURRENT_SOURCE_DIR}/src/ai_components/neural_network_models.h\n    ${CMAKE_CURRENT_SOURCE_DIR}/src/ai_components/carl_compute_engine.h\n    ${CMAKE_CURRENT_SOURCE_DIR}/src/ai_components/compute_pipeline_manager.h\n)\n\n# Nova integration sources\nset(NOVA_SOURCES\n    ${CMAKE_CURRENT_SOURCE_DIR}/nova/Core/core.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/nova/Core/components/genesis.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/nova/Core/components/logger.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/nova/Core/modules/render.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/nova/Core/modules/presentation.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/nova/Core/modules/pipeline/pipeline.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/nova/Core/modules/pipeline/scene.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/nova/Core/modules/camera/camera.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/nova/Core/modules/camera/perspective.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/nova/Core/modules/atomic/atomic.cpp\n)\n\n# Compute shader sources\nset(SHADER_SOURCES\n    ${CMAKE_CURRENT_SOURCE_DIR}/shaders/convolution2d.comp\n    ${CMAKE_CURRENT_SOURCE_DIR}/shaders/pooling_max.comp\n    ${CMAKE_CURRENT_SOURCE_DIR}/shaders/pooling_average.comp\n    ${CMAKE_CURRENT_SOURCE_DIR}/shaders/batch_normalization.comp\n    ${CMAKE_CURRENT_SOURCE_DIR}/shaders/activation_relu.comp\n    ${CMAKE_CURRENT_SOURCE_DIR}/shaders/matrix_multiply.comp\n    ${CMAKE_CURRENT_SOURCE_DIR}/shaders/gradient_descent.comp\n)\n\n# Compile shaders to SPIR-V\nfunction(compile_shader SHADER_SOURCE SHADER_OUTPUT)\n    add_custom_command(\n        OUTPUT ${SHADER_OUTPUT}\n        COMMAND ${Vulkan_GLSLC_EXECUTABLE} ${SHADER_SOURCE} -o ${SHADER_OUTPUT}\n        DEPENDS ${SHADER_SOURCE}\n        COMMENT \"Compiling shader ${SHADER_SOURCE}\"\n    )\nendfunction()\n\n# Compile all shaders\nset(COMPILED_SHADERS)\nforeach(SHADER_FILE ${SHADER_SOURCES})\n    get_filename_component(SHADER_NAME ${SHADER_FILE} NAME_WE)\n    set(SHADER_OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/shaders/${SHADER_NAME}.spv)\n    compile_shader(${SHADER_FILE} ${SHADER_OUTPUT})\n    list(APPEND COMPILED_SHADERS ${SHADER_OUTPUT})\nendforeach()\n\n# Create shaders target\nadd_custom_target(cnn_shaders ALL DEPENDS ${COMPILED_SHADERS})\n\n# CNN Training Library\nadd_library(carl_cnn STATIC\n    ${CNN_SOURCES}\n    ${NOVA_SOURCES}\n)\n\ntarget_include_directories(carl_cnn PUBLIC\n    ${CMAKE_CURRENT_SOURCE_DIR}/src\n    ${CMAKE_CURRENT_SOURCE_DIR}/nova\n    ${Vulkan_INCLUDE_DIRS}\n)\n\ntarget_link_libraries(carl_cnn PUBLIC\n    ${Vulkan_LIBRARIES}\n    Threads::Threads\n)\n\ntarget_compile_features(carl_cnn PUBLIC cxx_std_17)\n\n# Compiler-specific optimizations\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n    target_compile_options(carl_cnn PRIVATE\n        -Wall -Wextra -Wpedantic\n        -O3 -march=native\n        -ffast-math -funroll-loops\n    )\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n    target_compile_options(carl_cnn PRIVATE\n        /W4 /O2 /arch:AVX2\n        /fp:fast /Qvec-report:1\n    )\nendif()\n\n# Debug builds\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    target_compile_definitions(carl_cnn PRIVATE\n        CARL_DEBUG=1\n        VK_LAYER_KHRONOS_validation\n    )\nelse()\n    target_compile_definitions(carl_cnn PRIVATE\n        CARL_RELEASE=1\n        NDEBUG\n    )\nendif()\n\n# CNN Training Example\nadd_executable(cnn_training_example\n    ${CMAKE_CURRENT_SOURCE_DIR}/src/examples/cnn_training_example.cpp\n)\n\ntarget_link_libraries(cnn_training_example PRIVATE\n    carl_cnn\n)\n\n# Make sure shaders are compiled before building\nadd_dependencies(cnn_training_example cnn_shaders)\n\n# CNN Training Tests\nif(BUILD_TESTING)\n    add_executable(cnn_training_tests\n        ${CMAKE_CURRENT_SOURCE_DIR}/src/tests/cnn_training_tests.cpp\n    )\n    \n    target_link_libraries(cnn_training_tests PRIVATE\n        carl_cnn\n        gtest gtest_main\n    )\n    \n    add_dependencies(cnn_training_tests cnn_shaders)\n    \n    # Register tests with CTest\n    include(GoogleTest)\n    gtest_discover_tests(cnn_training_tests)\nendif()\n\n# Performance Benchmarks\nadd_executable(cnn_benchmarks\n    ${CMAKE_CURRENT_SOURCE_DIR}/src/benchmarks/cnn_performance_benchmark.cpp\n)\n\ntarget_link_libraries(cnn_benchmarks PRIVATE\n    carl_cnn\n)\n\nadd_dependencies(cnn_benchmarks cnn_shaders)\n\n# Installation\ninstall(TARGETS carl_cnn cnn_training_example\n    RUNTIME DESTINATION bin\n    LIBRARY DESTINATION lib\n    ARCHIVE DESTINATION lib\n)\n\ninstall(FILES ${CNN_HEADERS}\n    DESTINATION include/carl/ai\n)\n\ninstall(FILES ${COMPILED_SHADERS}\n    DESTINATION share/carl/shaders\n)\n\ninstall(FILES\n    ${CMAKE_CURRENT_SOURCE_DIR}/docs/CNN_Training_Guide.md\n    DESTINATION share/carl/docs\n)\n\n# Configuration summary\nmessage(STATUS \"CNN Training Module Configuration:\")\nmessage(STATUS \"  Vulkan Found: ${Vulkan_FOUND}\")\nmessage(STATUS \"  Vulkan Version: ${Vulkan_VERSION}\")\nmessage(STATUS \"  GLSLC Compiler: ${Vulkan_GLSLC_EXECUTABLE}\")\nmessage(STATUS \"  Build Type: ${CMAKE_BUILD_TYPE}\")\nmessage(STATUS \"  Testing: ${BUILD_TESTING}\")\nmessage(STATUS \"  Compiler: ${CMAKE_CXX_COMPILER_ID}\")\nmessage(STATUS \"  CNN Sources: ${CNN_SOURCES}\")\nmessage(STATUS \"  Shader Count: ${list(LENGTH SHADER_SOURCES)}\")\n\n# Validation layers for debug builds\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    message(STATUS \"  Vulkan Validation: Enabled\")\n    set_property(TARGET carl_cnn PROPERTY\n        VS_DEBUGGER_ENVIRONMENT \"VK_LAYER_PATH=${Vulkan_LAYER_PATH}\")\nelse()\n    message(STATUS \"  Vulkan Validation: Disabled\")\nendif()\n\n# GPU vendor optimizations\nif(NVIDIA_GPU)\n    target_compile_definitions(carl_cnn PRIVATE CARL_NVIDIA_OPTIMIZATIONS)\n    message(STATUS \"  NVIDIA Optimizations: Enabled\")\nelseif(AMD_GPU)\n    target_compile_definitions(carl_cnn PRIVATE CARL_AMD_OPTIMIZATIONS)\n    message(STATUS \"  AMD Optimizations: Enabled\")\nelse()\n    message(STATUS \"  GPU Optimizations: Generic\")\nendif()\n\n# Memory management options\nif(LARGE_MODEL_SUPPORT)\n    target_compile_definitions(carl_cnn PRIVATE\n        CARL_LARGE_MODEL_SUPPORT\n        CARL_SPARSE_MEMORY_ENABLED\n    )\n    message(STATUS \"  Large Model Support: Enabled\")\nendif()\n\n# Profiling support\nif(ENABLE_PROFILING)\n    target_compile_definitions(carl_cnn PRIVATE\n        CARL_PROFILING_ENABLED\n        VK_ENABLE_BETA_EXTENSIONS\n    )\n    message(STATUS \"  Profiling Support: Enabled\")\nendif()\n\n# Multi-threading configuration\nif(Threads_FOUND)\n    target_compile_definitions(carl_cnn PRIVATE\n        CARL_MULTITHREADING_ENABLED\n        CARL_THREAD_COUNT=${CMAKE_THREAD_COUNT}\n    )\n    message(STATUS \"  Multi-threading: Enabled (${CMAKE_THREAD_COUNT} threads)\")\nelse()\n    message(STATUS \"  Multi-threading: Disabled\")\nendif()\n\n# Documentation generation\nfind_package(Doxygen QUIET)\nif(DOXYGEN_FOUND)\n    set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxyfile.in)\n    set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)\n    \n    configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)\n    \n    add_custom_target(cnn_docs ALL\n        COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n        COMMENT \"Generating CNN API documentation with Doxygen\"\n        VERBATIM\n    )\n    \n    message(STATUS \"  Documentation: Enabled\")\nelse()\n    message(STATUS \"  Documentation: Disabled (Doxygen not found)\")\nendif()\n\n# Package configuration\ninclude(CMakePackageConfigHelpers)\n\nwrite_basic_package_version_file(\n    \"${CMAKE_CURRENT_BINARY_DIR}/CARLCNNConfigVersion.cmake\"\n    VERSION \"1.0.0\"\n    COMPATIBILITY AnyNewerVersion\n)\n\nexport(TARGETS carl_cnn\n    FILE \"${CMAKE_CURRENT_BINARY_DIR}/CARLCNNTargets.cmake\"\n    NAMESPACE CARL::\n)\n\nconfigure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/CARLCNNConfig.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/CARLCNNConfig.cmake\"\n    @ONLY\n)\n\ninstall(EXPORT CARLCNNTargets\n    FILE CARLCNNTargets.cmake\n    NAMESPACE CARL::\n    DESTINATION lib/cmake/CARLCNN\n)\n\ninstall(FILES\n    \"${CMAKE_CURRENT_BINARY_DIR}/CARLCNNConfig.cmake\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/CARLCNNConfigVersion.cmake\"\n    DESTINATION lib/cmake/CARLCNN\n)\n\n# Custom targets for convenience\nadd_custom_target(cnn_all\n    DEPENDS carl_cnn cnn_training_example cnn_shaders\n)\n\nif(BUILD_TESTING)\n    add_custom_target(cnn_test\n        COMMAND cnn_training_tests\n        DEPENDS cnn_training_tests\n        COMMENT \"Running CNN training tests\"\n    )\nendif()\n\nadd_custom_target(cnn_benchmark\n    COMMAND cnn_benchmarks\n    DEPENDS cnn_benchmarks\n    COMMENT \"Running CNN performance benchmarks\"\n)\n\n# Clean target for CNN components\nadd_custom_target(cnn_clean\n    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_CURRENT_BINARY_DIR}/shaders\n    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_CURRENT_BINARY_DIR}/docs\n    COMMENT \"Cleaning CNN build artifacts\"\n)\n\n# Final configuration summary\nmessage(STATUS \"\")\nmessage(STATUS \"CARL CNN Training Module configured successfully!\")\nmessage(STATUS \"\")\nmessage(STATUS \"Build targets:\")\nmessage(STATUS \"  carl_cnn - CNN training library\")\nmessage(STATUS \"  cnn_training_example - Comprehensive training example\")\nmessage(STATUS \"  cnn_training_tests - Unit test suite\")\nmessage(STATUS \"  cnn_benchmarks - Performance benchmarks\")\nmessage(STATUS \"  cnn_shaders - Compiled compute shaders\")\nmessage(STATUS \"\")\nmessage(STATUS \"Usage:\")\nmessage(STATUS \"  make cnn_all      - Build all CNN components\")\nmessage(STATUS \"  make cnn_test     - Run test suite\")\nmessage(STATUS \"  make cnn_benchmark - Run performance tests\")\nmessage(STATUS \"  make cnn_docs     - Generate documentation\")\nmessage(STATUS \"\")\n"